import os
import openai
import pandas as pd
from langgraph.graph import StateGraph
#from langchain_community.chat_models import ChatOpenAI
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
from PIL import Image #to use PIL use in terminal 'pip install pillow'
import requests
from io import BytesIO
from tenacity import retry, wait_random_exponential, stop_after_attempt
from datetime import datetime
#import logging <- There is potential to add login mechanism in the script based on requirements

### SETUP ###

# Get the current date (currently using it for nameing convention of created image files)
currentDate=datetime.today().strftime('%Y%m%d%H%M')

# Get the path to the directory where this file is located. All components of the program will be located in this directory.
script_path = os.path.dirname(os.path.realpath(__file__))

# Load API for OpenAI from .env file
load_dotenv(os.path.join(script_path, ".env")) #load .env file
openai.api_key = os.getenv("OPENAI_API_KEY") #use your own API key. Add it to .env file.
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7) #using 3.5 as it is cheaper than 4.0 and for this project is enough

# Checking if the folder for created images exists. If not, create it.
os.makedirs(os.path.join(script_path, "generated_images"), exist_ok=True)

# Load input Excel file
df = pd.read_excel(os.path.join(script_path, "input_posts.xlsx"))

# Prompt Templates
# prompt template to prepare post text
post_prompt = PromptTemplate.from_template(
    "Write post in {style} style on a platform {platform} about: {topic}"
)
# prompt template to prepare image prompt
image_prompt = PromptTemplate.from_template(
    "Generate prompt for {image_type} in {image_style} style about: {topic}"
)

### FUNCTIONS ###

# Function to generate text for post using GPT.
@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(3)) #adding retry to be sure that it is not some temp error
def generate_post_text(topic, style, platform): #topic, style, platform are variables from the input Excel file
    prompt = post_prompt.format(topic=topic, style=style, platform=platform)
    #return llm.invoke(prompt) <- this will return pure AIMessage. As I need str two lines down bellow are makeing string out of this function.
    response = llm.invoke(prompt)
    return response.content

# Function to generate prompt for image using GPT.
@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(3))#adding retry to be sure that it is not some temp error
def generate_image_prompt(topic, image_style, image_type): #topic, image_style, image_type are variables from the input Excel file
    prompt = image_prompt.format(topic=topic, image_style=image_style, image_type=image_type)
    #return llm.invoke(prompt)<- this will return pure AIMessage. As I need str two lines down bellow are makeing string out of this function.
    response = llm.invoke(prompt)
    return response.content 

# Function to generate image using DALL-E API.
# Because in GPT we can't generate images, we need to use DALL-E API with prompt generated by GPT.
@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(3))#adding retry to be sure that it is not some temp error
def generate_image_from_prompt(prompt_text, filename):
    try:
        response = openai.images.generate(
            model="dall-e-3",
            prompt=prompt_text,
            size="1024x1024",
            quality="standard",
            n=1
        )
        image_url = response.data[0].url

        # Downliad image and save it locally
        image_data = requests.get(image_url).content
        file_path = os.path.join(script_path,"generated_images", filename)
        with open(file_path, "wb") as f:
            f.write(image_data)
        return file_path
    except Exception as e:
        return f"ERROR: Error while generating image. ERROR DETAILS: {e}"

### LANG GRAPH NODES ###

# Function to build state for each row in the input Excel file
def build_state(row): # row is a row from the input Excel file
    return {
        "topic": row["topic"],
        "platform": row["platform"],
        "style": row["text_style"],
        "image_style": row["graphic_type"],
        "image_type": row["graphic_style"],
        "row_index": row.name
    }

# Function to generate post text
def node_generate_post(state): # state is a state for each row in the input Excel file from build_state function.
    state["post_text"] = generate_post_text(state["topic"], state["style"], state["platform"])
    return state

# Function to generate image prompt
def node_generate_image_prompt(state): # state is a state for each row in the input Excel file from build_state function.
    state["image_prompt"] = generate_image_prompt(state["topic"], state["image_style"], state["image_type"])
    return state

# Function to generate image file
def node_generate_image_file(state): # state is a state for each row in the input Excel file from build_state function.
    safe_filename = f"{datetime.today().strftime('%Y%m%d%H%M')}image_row_{state['row_index']}.png" # adding current time to file name to always have unique name
    path = generate_image_from_prompt(state["image_prompt"], safe_filename) 
    state["image_path"] = path
    return state

# Function to finish the process
def node_finish(state): # state is a state for each row in the input Excel file from build_state function.
    return state

### PROCESSING ###

# Build grapghs
graph = StateGraph(state_schema=dict) #declaring that the state for StateGraph will be provided in dictionary form
graph.add_node("generate_post", node_generate_post)
graph.add_node("generate_image_prompt", node_generate_image_prompt)
graph.add_node("generate_image_file", node_generate_image_file)
graph.add_node("finish", node_finish)

graph.set_entry_point("generate_post")
graph.add_edge("generate_post", "generate_image_prompt")
graph.add_edge("generate_image_prompt", "generate_image_file")
graph.add_edge("generate_image_file", "finish")
graph.set_finish_point("finish")

app = graph.compile()

# Using graph generate the content for each row in excel. Store it in excel pear each row. 
for idx, row in df.iterrows():
    state = build_state(row)
    result = app.invoke(state)

    df.at[idx, "generated_text"] = result["post_text"]
    df.at[idx, "generated_graphic_prompt"] = result["image_prompt"]
    df.at[idx, "generated_graphic_path"] = result["image_path"]

# Save the excel file
df.to_excel(os.path.join(script_path, "input_posts.xlsx"), index=False)